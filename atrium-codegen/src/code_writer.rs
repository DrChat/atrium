use heck::{ToPascalCase, ToSnakeCase};
use itertools::Itertools;
use std::fs::File;
use std::io::{Result, Write};
use std::path::Path;
use std::process::Command;

#[derive(Default)]
pub(crate) struct CodeWriter {
    buf: Vec<u8>,
}

impl CodeWriter {
    pub fn write_header(
        &mut self,
        description: Option<&String>,
        schema_id: Option<&String>,
    ) -> Result<()> {
        writeln!(
            &mut self.buf,
            "// This file is generated by atrium-codegen. Do not edit."
        )
        .ok();
        if let Some(schema_id) = schema_id {
            writeln!(
                &mut self.buf,
                "//! Definitions for the `{schema_id}` namespace."
            )?;
        }
        if let Some(description) = description {
            writeln!(&mut self.buf, "//! {}", description)?;
        }
        Ok(())
    }
    pub fn write_records(&mut self, records: &[String]) -> Result<()> {
        writeln!(
            &mut self.buf,
            "//! A collection of ATP repository record type."
        )?;
        writeln!(&mut self.buf)?;
        writeln!(
            &mut self.buf,
            "#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]"
        )?;
        writeln!(&mut self.buf, r#"#[serde(tag = "$type")]"#)?;
        writeln!(&mut self.buf, "pub enum Record {{")?;
        for r in records {
            writeln!(&mut self.buf, r#"    #[serde(rename = "{}")]"#, r)?;
            writeln!(
                &mut self.buf,
                "    {}(crate::{}::Record),",
                r.to_pascal_case(),
                r.split('.').map(str::to_snake_case).join("::")
            )?;
        }
        writeln!(&mut self.buf, "}}")?;
        Ok(())
    }
    pub fn write_traits_macro(&mut self, traits: &[String]) -> Result<()> {
        writeln!(
            &mut self.buf,
            "//! A macro for implementing the traits of all XRPC requests."
        )?;
        writeln!(&mut self.buf)?;
        writeln!(&mut self.buf, "#[macro_export]")?;
        writeln!(&mut self.buf, "macro_rules! impl_traits {{")?;
        writeln!(&mut self.buf, "    ($type:ty) => {{")?;
        for t in traits {
            let parts = t.split('.').collect_vec();
            writeln!(
                &mut self.buf,
                "        impl atrium_api::{}::{} for $type {{}}",
                parts.iter().map(|s| s.to_snake_case()).join("::"),
                parts[parts.len() - 1].to_pascal_case()
            )?;
        }
        writeln!(&mut self.buf, "    }};")?;
        writeln!(&mut self.buf, "}}")?;
        Ok(())
    }
    pub fn write_mods(&mut self, mods: &[String]) -> Result<()> {
        for m in mods {
            if m == "lib" {
                continue;
            }
            writeln!(&mut self.buf, "pub mod {m};")?;
        }
        Ok(())
    }
    pub fn write_to_file(&mut self, filepath: &Path) -> Result<()> {
        let mut file = File::create(filepath)?;
        file.write_all(&self.buf)?;
        match Command::new("rustfmt")
            .arg("--edition")
            .arg("2021")
            .arg(filepath)
            .status()
        {
            Ok(status) if status.success() => {}
            _ => {
                eprintln!("Failed to run rustfmt on {}", filepath.display());
            }
        }
        Ok(())
    }
}
