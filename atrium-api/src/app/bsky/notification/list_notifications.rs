// This file is generated by atrium-codegen. Do not edit.
//! Definitions for the `app.bsky.notification.listNotifications` namespace.

#[async_trait::async_trait]
pub trait ListNotifications: crate::xrpc::XrpcClient {
    async fn list_notifications(&self, params: Parameters) -> Result<Output, Box<dyn std::error::Error>> {
        crate::xrpc::XrpcClient::send(
            self,
            http::Method::GET,
            "app.bsky.notification.listNotifications",
            Some(params),
            Option::<()>::None,
        )
        .await
    }
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
pub struct Parameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub seen_at: Option<String>,
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
pub struct Output {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    pub notifications: Vec<Notification>,
}

pub enum Error {
}

// app.bsky.notification.listNotifications#notification
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "camelCase")]
pub struct Notification {
    pub author: crate::app::bsky::actor::defs::ProfileView,
    pub cid: String,
    pub indexed_at: String,
    pub is_read: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<crate::com::atproto::label::defs::Label>>,
    /// Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.
    pub reason: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason_subject: Option<String>,
    pub record: crate::records::Record,
    pub uri: String,
}
