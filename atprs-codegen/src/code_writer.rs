use atprs_lex::lexicon::LexUserType;
use heck::ToPascalCase;
use std::collections::HashMap;
use std::io::{Result, Write};

pub(crate) struct CodeWriter {
    buf: Vec<u8>,
    schema_id: Option<String>,
}

impl CodeWriter {
    pub fn new(schema_id: Option<String>) -> Self {
        Self {
            buf: Vec::new(),
            schema_id,
        }
    }
    pub fn write_header(&mut self) -> Result<()> {
        writeln!(
            &mut self.buf,
            "// This file is generated by atprs-codegen. Do not edit"
        )
        .ok();
        if let Some(schema_id) = &self.schema_id {
            writeln!(
                &mut self.buf,
                "//! Definitions for the `{schema_id}` namespace."
            )?;
        }
        Ok(())
    }
    pub fn write_user_type(
        &mut self,
        name: &str,
        def: &LexUserType,
        _defmap: &HashMap<String, &LexUserType>,
    ) -> Result<()> {
        // TODO
        writeln!(&mut self.buf)?;
        match def {
            LexUserType::XrpcProcedure(_) | LexUserType::XrpcQuery(_) => {
                writeln!(&mut self.buf, "// TODO")?;
            }
            _ => {
                let refname = if let Some(schema_id) = &self.schema_id {
                    if name == "main" {
                        schema_id.clone()
                    } else {
                        format!("{}#{}", schema_id, name)
                    }
                } else {
                    name.to_string()
                };
                writeln!(&mut self.buf, "/// `{refname}`")?;
                writeln!(&mut self.buf, "pub struct {} {{}}", name.to_pascal_case())?;
            }
        }
        Ok(())
    }
    pub fn write_mods(&mut self, mods: &[String]) -> Result<()> {
        for m in mods {
            if m == "lib" {
                continue;
            }
            writeln!(&mut self.buf, "pub mod {m};")?;
        }
        Ok(())
    }
    pub fn write_to_file(&mut self, file: &mut impl Write) -> Result<()> {
        file.write_all(&self.buf)
    }
}
