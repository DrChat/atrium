// This file is generated by atprs-codegen. Do not edit.
//! Definitions for the `com.atproto.repo.applyWrites` namespace.

/// Apply a batch transaction of creates, updates, and deletes.
#[async_trait::async_trait]
pub trait ApplyWrites: crate::xrpc::XrpcClient {
    async fn apply_writes(&self, input: Input) -> Result<(), Box<dyn std::error::Error>> {
        crate::xrpc::XrpcClient::send(
            self,
            http::Method::POST,
            "com.atproto.repo.applyWrites",
            Some(input),
        )
        .await
    }
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Input {
    /// The handle or DID of the repo.
    pub repo: String,
    pub swap_commit: Option<String>,
    /// Validate the records?
    pub validate: Option<bool>,
    // pub writes: Vec<...>
}

pub enum Error {
    InvalidSwap,
}

// com.atproto.repo.applyWrites#create
/// Create a new record.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Create {
    pub collection: String,
    pub rkey: Option<String>,
    // pub value: ...,
}

// com.atproto.repo.applyWrites#delete
/// Delete an existing record.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Delete {
    pub collection: String,
    pub rkey: String,
}

// com.atproto.repo.applyWrites#update
/// Update an existing record.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Update {
    pub collection: String,
    pub rkey: String,
    // pub value: ...,
}
